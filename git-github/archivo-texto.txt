Esta es la historia de Isac 

Isac tiene 28 años y nacio en CDMX

Hoy hablaremos del curso de induccion de Git y Github  

Se  va empezar  desde la clase 8 ya ser subieron varios los archivos que se realizaron desde antes con las demas clases.


Se realizao la history y los comandos de git para realizar la siguiente clase desde la 8 en andelante hasta las 12- en adelante esta con la explicacion de carpetas.

Clase 13 Git reset  vs git rm 

git rm Es te comando no ayuda a eliminar archivos de git sin eliminar su historial del sustema de verusones. Esto quiere decir qie si necesitamos recuperar el archivo sol devemos de viajar en el tiempo y recuperar el ultimo commit antes de borrar el archivo 

# git rm no se utiliza nada mas asi  debemos usar una de las flags para indeiarle a git como eliminar los archivos que ya no necesitamos en la ultima version del proyecto:
* gir rm --cached: elimina los archivos de nuestro repositorio local y del area de staging, pero los mnatinien en el disco duro 
*git rm --force: elimina los archivos  de git y del disco duro, git siempre guarda todo, por lo general podemos acceder al registro de existencia de los archivo, de modo que podemos recuperarlos si es necesario

# git reset: este comando nos ayuda a volver en el tiempo, pero no como git checkout que nos deja ir, mirar, pasear, y volver, con git reset volvemos al pasado sin posibilidad de volver al futuro, este comando es MUY PELIGROSO y de debemos de emplearlo solo en caso e emergencia.
Hay dos formas de utilizar git reset: con git reset --hard borrando toda la informacion que tengamos en el area de staging y perdiendo todo para siempre, git --soft mantiene alli los cambios del area de staging para que podamos aplicar nuestros ultimos cambios desde el commit anterior 

* git reset --soft: borramos todo el historial y los registros de git pero guardando los cambios que tengamos en staging podemos aplicar las ultimas actualizaciones a un nuevo commit 
* git reset --hard: borra todo TODO toda la informacion del commit y del area de staging se borra el historial 

CLASE 14 
Flujo de trabajo básico con un repositorio remoto

Se explica comandos del flujo de trabajo para un repositorio como se muestra en el pdf que esta agregado en el repositorio los siguiente comandos que se mostraron son los siguientes:
Comandos para trabajo remoto con git:
*git clone url del servidor remoto: nos permite descargar los archivos de la ultima version de la rama pricipal y todo el historial de cambios en la carpeta 
*git push: luego de hacer git add y git commit debemos de ejecturar para madar los cambios al servidor remoto
*git fetch: lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local 
*git merge: lo necesitamos para combinar los ultimos cambios del servidor remoto y nuestro directorio de trabajo 
*git pull: basicamente es la combinacion de fetch y merge

CLASE 15 
Introducción a las ramas o branches de Git

las ramas o branches son las formas de hacer cambios en nuestro proyecto sin afectar el flujo de trabajo de la rama principal 

Cómo funcionan las ramas en GIT
* git branch nombre de la rama: genera una nueva rama
* git checkout nombre de la rama: con este cambiamos de rama 
* git checkout -b rama : genera una rama y nos mueve a ella automaticamente 
* git reset id-commit: nos lleva a cualquier commit sin importar la rama 
* git checkout rama o id commit:  nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado

CLASE 16
Fusión de ramas con Git merge

git merge nos permite crear un nuevo commit con la combinacion de dos ramas(branches) 

LA RAMA DONDE QUEREMOS HACER EL MERGE Y TRAER LOS CAMBIOS DE LAS RAMA CREADA SE DEBE DE HACER DESDE LA RAMA PRICIPAL PARA LLAMAR A LAS CREADA

Se realiza el merge de la rama clase 15 y clase 16

Comandos para corrección en GitHub 

* git checkout “codigo de version” “nombre del archivo”: volver a la última versión de la que se ha hecho commit.
* git reset: vuelve al pasado sin posibilidad de volver al futuro, se debe usar con especificaciones.
* git reset --soft: vuelve a la versión en el repositorio, pero guarda los cambios en staging. Así,     podemos aplicar actualizaciones a un nuevo commit.
* git reset --hard: todo vuelve a su versión anterior
* git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.
* git rm: elimina los archivos, pero no su historial. Si queremos recuperar algo, solo hay que regresar. se utiliza así:
* git rm --cached elimina los archivos en staging pero los mantiene en el disco duro.
* git rm --force elimina los archivos de git y del disco duro.
Comandos para revisión y comparación en GitHub
* git status: estado de archivos en el repositorio.
* git log: historia entera del archivo.
* git log --stat: cambios específicos en el archivo a partir de un commit.
* git show: cambios históricos y específicos hechos en un archivo.
* git diff “codigo de version 1” “codigo de version 2”: comparar cambios entre versiones.
* git diff: comparar directorio con staging.

Se repsa en el conetenido varios comandos para la revision en Github



CLASE 17

Resolución de conflictos al hacer un merge

Se realiza un merge desde la rama clase16 con la clase 17 para hacer el conflito con los archivos de html y Css

Cómo revertir un merge
Si nos hemos equivocado y queremos cancelar el merge, debemos usar el siguiente comando:
get merge 
Conflictos en repositorios remotos
Al trabajar con otras personas, es necesario utilizar un repositorio remoto.
­
-Para copiar el repositorio remoto al directorio de trabajo local, se utiliza el comando git clone <url>, y para enviar cambios al repositorio remoto se utiliza git push.
-Para actualizar el repositorio local se hace uso del comando git fetch, luego se debe fusionar los datos traídos con los locales usando git merge.

Para traer los datos y fusionarlos a la vez, en un solo comando, se usa git pull.
­- Para crear commits rápidamente, fusionando git add y git commit -m "", usamos git commit -am "".
­- Para generar nuevas ramas, hay que posicionarse sobre la rama que se desea copiar y utilizar el comando git branch <nombre>.
Para saltar entre ramas, se usa el comando git checkout <branch>
­- Una vez realizado los cambios en la rama, estas deben fusionarse con git merge.
El merge ocurre en la rama en la que se está posicionado. Por lo tanto, la rama a fusionar se transforma en la principal.
Los merges también son commits.
Los merges pueden generar conflictos, esto aborta la acción y pide que soluciones el problema manualmente, aceptando o rechazando los cambios que vienen.
image.png 

CLASE 18 
Cambios en GitHub: de master a main

Se da una breve explicacion de los cambios de las rama master y main  desde el 1 de octubre del 2020 cambio de la rama pricipal ya no es master si como main que fue derivado de las protestas de #BlackLivesMAtter  la rama master va hacer main siempre.

CLASE 19 
Uso de Github 

Se realizo la alta de cuenta del repositorio para el curso del mismo se dio de alta los archivos necesarios de todos las clases si requiere  se vieron varios comandos para hacerlo con github para hacer un reporsitrio son los siguientes: 

* git remote add origin url : el origin del repo de github 
* git remote / git remote -v : se verifica la url se haya guarda adecudamente 

Se cambio de la rama master a rama main  

se fue a la rama master se ejecuta git branch -M main

CLASE 20 
Cómo funcionan las llaves públicas y privadas

Se conoce como cifrado asimetrico, se puede hacer una llave publica y privada, estan vinculada.

Podemos compartir las llaves ya sea privada o publca 

Podemos mandar una llave publica para con un mensaje privado.

El mensaje está cifrado y puede ser enviado a la otra persona sin problemas en caso de que los archivos sean interceptados

La persona a la que enviamos el mensaje cifrado puede emplear su llave privada para descifrar el mensaje y ver los archivos

CLASE 21

Configura tus llaves SSH en local

Para general una llave SSH** : debemos de proteger la llave privado con una contraseña. 
COMANDO PARA GENERAR LLAVE 
ssh-keygen -t rsa -b 4096 -C "isac.renovato@libreria.com.mx"

creado tu llave debes la llave privada empieza asi en la carpeta que seleccionaste para generarla Id_rsa 
la llave publica empieza aasi Id_rsa.pub

Se realiza la llav tanto la publica como privada 

Terminar de config. nuestra sistema en windows y linux: encender: eval $(shh-agent -s)

Añadir tu llave SSH a el servidor 

ssh-add ruta-donde-guardaste-tu-llave-privada

CLASE 22

Conexión a GitHub con SSH: 
"La creación de las SSH es necesario solo una vez por cada computadora. Aquí conocerás cómo conectar a GitHub usando SSH." 

se actualiza la URL que guardamos en nuestro repositorio remoto envez de guaradar con URL con HTTPS vamos a usar la URL con SSH 

ssh
git remote set-url origin url-ssh-del-repo-en-github
Windows (Git Bash):
clip < ~/.shh/id_rsa.pub



CLASE 24 
Manejo de ramas en GitHub

Comandos para manejo de ramas en GitHub

Crear una rama:

* git branch branchName

Movernos a otra rama:
* git checkout branchName

Crear una rama en el repositorio local:
* git branch nombre-de-la-rama o git checkout -b nombre-de-la-rama.

Publicar una rama local al repositorio remoto:
* git push origin nombre-de-la-rama.

CLASE 25

Configurar múltiples colaboradores en un repositorio de GitHub

Cómo agregar colaboradores en Github
Solo debemos entrar a la configuración de colaboradores de nuestro proyecto. Se encuentra en:
Repositorio > Settings > Collaborators

Realizo un ejemplo con los compañeros
Hacer un commit con el nuevo mensaje que queremos, esto nos abre el editor de texto de la terminal:
git commit —amend
Corregimos el mensaje
Traer el repositorio remoto
git pull origin master
Ejecutar el cambio
git push --set-upstream origin master

CLASE 26

Para poder desarrollar software de manera óptima y ordenada, necesitamos tener un flujo de trabajo profesional, que nos permita trabajar en conjunto sin interrumpir el trabajo de otros desarrolladores. Una buena práctica de flujo de trabajo sería la siguiente:

Crear ramas
Asignar una rama a cada programador
El programador baja el repositorio con git pull origin master
El programador cambia de rama
El programador trabaja en esa rama y hace commits
El programador sube su trabajo con git push origin #nombre_rama
El encargado de organizar el proyecto baja, revisa y unifica todos los cambios.

Se realiza un ejercicio entre compañeros para realziar las ramas de cada uno para dar un merge.

CLASE 27
Flujo de trabajo profecional con Pull requests

En un entorno profesional normalmente se bloquea la rama master, y para enviar código a dicha rama pasa por un code review y luego de su aprobación se unen códigos con los llamados merge request.

Los PR (pull requests) son la base de la colaboración a proyectos Open Source, si tienen pensando colaborar en alguno es muy importante entender esto y ver cómo se hace en las próximas clases. Por lo general es forkear el proyecto, implementar el cambio en una nueva rama, hacer el PR y esperar que los administradores del proyecto hagan el merge o pidan algún cambio en el código o commits que hiciste.

CLASE 28 Utilizando Pull request en Github

Cómo se realiza un pull request

* Se trabaja en una rama paralela los cambios que se desean git checkout -b <rama>.

* Se hace un commit a la rama git commit -am '<Comentario>'.

* Se suben al remoto los cambios git push origin <rama>.

* En GitHub se hace el pull request comparando la rama master con la rama del fix.
Uno, o varios colaboradores revisan que el código sea correcto y dan feedback (en el chat del pull request).

* El colaborador hace los cambios que desea en la rama y lo vuelve a subir al remoto (automáticamente jala la historia de los cambios que se hagan en la rama, en remoto).

* Se aceptan los cambios en GitHub.

* Se hace merge a master desde GitHub.

CLASE 29 

Creando un Fork, contribuyendo a un repositorio


Se realiza un Fork con la cuenta (isactes) se clona el reporsitorio se hace una carpeta de la clase para los archivos, se hacen cambios para realziar las practicas correcpondientes se deja la url para confirmarlo https://github.com/isactes/Contador-Js.

Como se hace un fork remoto desde la consola en Github 

Al hacer un Fork, github sabe se hizo  el fork del proyecto por lo que se permite hacer un pull request PR desde el mismo repositorio los sig. nos ayudaran 

* git remote add <nombre del remoto> url-del-remoto
* git remote upstream url 

AL crearlo un remoto adicional podemos hacel un pull desde el nuevo origin en ese caso de tener permisos podremos hacer un fecth y push 

* git pull remoto ramas
* git pull upstream master

Este pull nos traera los cambios del remoto por lo que se estara al dia en el proyecto.

CLASSE 30 
Haciendo deployment a un servidor 

Pasos para haver el deployment en un servidor 

Comandos

* enretar carpeta del servidor 
* Copiar link en clone entre HTTPS O SSH

* git clone url: Deploy:
> Realizar cambios y commit en github 

* git pull ramaRemota main

* se habla de varios servidores para hacer Deploy como:
* Jenkisns

CLASE 31
Hazme un pull request PR 

Se realiza un fork para el PR del master de Platzi dejo el link para ver el fork y el PR 
https://github.com/isaclaleo/hyperblog


CLASE 32

Ignorar archivos en el repositorio con .gitignore

Se crea el archivo de .gitignore para los archivos de cada uno que no se desea subuir al repo 
Algunos ejemplos son los sig. de los archivos:

.env 
* jpg, png 
Dependiendo del archivo que no deseas subir es el que se debe de colocar en el  .gitignore


CLASE 33 

README.md una excelente practica 
Es un lugar donde se explica de que se trata el proyecto, como utilizar y demas informacion que se considere que se deba conocer cualquier persona que se vaya a trabajar de alguna forma del proyecto

Lo sarchivos README.md son escritos en lenguje llamado markdown por eso la extencion .md mismo que es un estandar de escritura de diversos sitios

Los README.md pueden estar en todas las carpetas pero el mas importante se encuentra la raiz, este documento ayuda a todos los colaboradores sepan la informacion relavante del proyecto modulo o seccion, Pueden crear cualquier archivo con la extencion .md pero solo README.md los mostrar por defecto en Github.

CLASE 34 
Tu sitio Web publico con GitHub

Github tiene un servidor de hosting gratuito, puede tener un repositorio alojado en github y hacer que el contenido se muestre en la web en tiempo real.
Se deja la pactrica que se realizo con Github Pages https://isaclaleo.github.io/isaclaloe/

Pasos para subir un repositorio a GitHub Pages

* Debemos tomar la llave SSH y hacer un git clone #SSHexample en mi computador local (Home).
* Luego, accederemos a la carpeta nueva que aparece en nuestra máquina local.
* Creamos un nuevo archivo que se llame index.html
* Guardamos los cambios, hacemos un git pull y seguido de esto un git push a master.
* Vamos a las opciones de settings de este repositorio y, en la parte de abajo, en la columna Github Pages, configuramos el source o fuente para que traiga la rama master
* Guardamos los cambios.


CLASE 35 el primer commit 1
Git Rebase: reorganizacion el trabajo realizado

Rebase es el proceso de mover o combinar una secuencia de confirmaciones en una nueva confirmación base. La reorganización es muy útil y se visualiza fácilmente en el contexto de un flujo de trabajo de ramas de funciones. El proceso general se puede visualizar de la siguiente manera.
